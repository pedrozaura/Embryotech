"""Add logs table

Revision ID: bc5938929fc5
Revises: 39d0503e83bc
Create Date: 2025-09-23 13:12:19.370706

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bc5938929fc5'
down_revision = '39d0503e83bc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('logs', 'usuario_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='ID do usuário que realizou a ação (pode ser NULL para ações anônimas)',
               existing_nullable=True)
    op.alter_column('logs', 'usuario_nome',
               existing_type=sa.VARCHAR(length=80),
               comment=None,
               existing_comment='Nome do usuário no momento da ação (para histórico)',
               existing_nullable=True)
    op.alter_column('logs', 'acao',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Tipo de ação realizada (LOGIN, LOGOUT, CREATE_LEITURA, etc.)',
               existing_nullable=False)
    op.alter_column('logs', 'detalhes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Detalhes adicionais da ação em formato JSON',
               existing_nullable=True)
    op.alter_column('logs', 'endpoint',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='Endpoint da API que foi chamado',
               existing_nullable=True)
    op.alter_column('logs', 'metodo_http',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Método HTTP utilizado (GET, POST, PUT, DELETE)',
               existing_nullable=True)
    op.alter_column('logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment=None,
               existing_comment='Endereço IP do cliente',
               existing_nullable=True)
    op.alter_column('logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='User Agent do navegador/cliente',
               existing_nullable=True)
    op.alter_column('logs', 'status_code',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Código de status HTTP da resposta',
               existing_nullable=True)
    op.alter_column('logs', 'data_hora',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Data e hora da ação',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_logs_acao'), table_name='logs')
    op.drop_index(op.f('idx_logs_data_hora'), table_name='logs')
    op.drop_index(op.f('idx_logs_endpoint'), table_name='logs')
    op.drop_index(op.f('idx_logs_usuario_id'), table_name='logs')
    op.drop_table_comment(
        'logs',
        existing_comment='Tabela para armazenar logs de todas as atividades do sistema',
        schema=None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'logs',
        'Tabela para armazenar logs de todas as atividades do sistema',
        existing_comment=None,
        schema=None
    )
    op.create_index(op.f('idx_logs_usuario_id'), 'logs', ['usuario_id'], unique=False)
    op.create_index(op.f('idx_logs_endpoint'), 'logs', ['endpoint'], unique=False)
    op.create_index(op.f('idx_logs_data_hora'), 'logs', ['data_hora'], unique=False)
    op.create_index(op.f('idx_logs_acao'), 'logs', ['acao'], unique=False)
    op.alter_column('logs', 'data_hora',
               existing_type=postgresql.TIMESTAMP(),
               comment='Data e hora da ação',
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('logs', 'status_code',
               existing_type=sa.INTEGER(),
               comment='Código de status HTTP da resposta',
               existing_nullable=True)
    op.alter_column('logs', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               comment='User Agent do navegador/cliente',
               existing_nullable=True)
    op.alter_column('logs', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               comment='Endereço IP do cliente',
               existing_nullable=True)
    op.alter_column('logs', 'metodo_http',
               existing_type=sa.VARCHAR(length=10),
               comment='Método HTTP utilizado (GET, POST, PUT, DELETE)',
               existing_nullable=True)
    op.alter_column('logs', 'endpoint',
               existing_type=sa.VARCHAR(length=200),
               comment='Endpoint da API que foi chamado',
               existing_nullable=True)
    op.alter_column('logs', 'detalhes',
               existing_type=sa.TEXT(),
               comment='Detalhes adicionais da ação em formato JSON',
               existing_nullable=True)
    op.alter_column('logs', 'acao',
               existing_type=sa.VARCHAR(length=100),
               comment='Tipo de ação realizada (LOGIN, LOGOUT, CREATE_LEITURA, etc.)',
               existing_nullable=False)
    op.alter_column('logs', 'usuario_nome',
               existing_type=sa.VARCHAR(length=80),
               comment='Nome do usuário no momento da ação (para histórico)',
               existing_nullable=True)
    op.alter_column('logs', 'usuario_id',
               existing_type=sa.INTEGER(),
               comment='ID do usuário que realizou a ação (pode ser NULL para ações anônimas)',
               existing_nullable=True)
    # ### end Alembic commands ###
